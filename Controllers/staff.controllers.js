import Staff from "../models/Staff.js";
import User from "../models/User.js";
import Department from "../models/Departement.js";



// Cr√©er un membre du personnel (RH uniquement)
export const createStaff = async (req, res) => {
  try {
    const { role, _id } = req.user;

    const {
      nom,
      prenom,
      email,
      poste,
      departement,
      typeContrat,
      dateEmbauche,
      dateFinContrat
    } = req.body;

    if (!nom || !email || !poste || !departement || !typeContrat || !dateEmbauche) {
      return res.status(400).json({ message: "Champs requis manquants." });
    }

    const responsableId = role === "RH" ? _id : null;

    const newStaff = new Staff({
      nom,
      prenom,
      email,
      poste,
      departement,
      typeContrat,
      dateEmbauche: new Date(dateEmbauche),
      dateFinContrat: dateFinContrat ? new Date(dateFinContrat) : null,
      responsableId
    });

    await newStaff.save();
    res.status(201).json({ message: "Staff ajout√© avec succ√®s", staff: newStaff });
  } catch (err) {
    res.status(500).json({ message: "Erreur cr√©ation staff", error: err.message });
  }
};


// Mettre √† jour un membre
export const updateStaff = async (req, res) => {
  try {
    const staff = await Staff.findByIdAndUpdate(req.params.id, req.body, {
      new: true
    });
    if (!staff) return res.status(404).json({ message: "Staff non trouv√©" });

    res.json({ message: "Mise √† jour r√©ussie", staff });
  } catch (err) {
    res.status(500).json({ message: "Erreur mise √† jour", error: err.message });
  }
};

// Supprimer un membre
export const deleteStaff = async (req, res) => {
  try {
    const deleted = await Staff.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Staff non trouv√©" });

    res.json({ message: "Staff supprim√© avec succ√®s" });
  } catch (err) {
    res.status(500).json({ message: "Erreur suppression staff", error: err.message });
  }
};

// R√©cup√©rer tous les membres (admin uniquement ou RH)
export const getAllStaffs = async (req, res) => {
  try {
    const staffs = await Staff.find().sort({ createdAt: -1 });
    res.json(staffs);
  } catch (err) {
    res.status(500).json({ message: "Erreur r√©cup√©ration staff", error: err.message });
  }
};

// R√©cup√©rer un membre par ID
export const getStaffById = async (req, res) => {
  try {
    const staff = await Staff.findById(req.params.id);
    if (!staff) return res.status(404).json({ message: "Staff non trouv√©" });

    res.json(staff);
  } catch (err) {
    res.status(500).json({ message: "Erreur r√©cup√©ration staff", error: err.message });
  }
};

// R√©cup√©rer le staff d'un responsable RH
export const getStaffByResponsable = async (req, res) => {
  try {
    const { _id } = req.user;
    const staffs = await Staff.find({ responsableId: _id }).sort({ nom: 1 });
    res.json(staffs);
  } catch (err) {
    res.status(500).json({ message: "Erreur r√©cup√©ration staff RH", error: err.message });
  }
};

// Staff filtr√© pour le manager (par d√©partement)
export const getStaffByManager = async (req, res) => {
  try {
    const { _id, role } = req.user;
    console.log(`üîç Requ√™te re√ßue pour r√©cup√©rer les staffs du manager ID: ${_id}, r√¥le: ${role}`);

    if (role !== "Manager") {
      console.warn(`‚ö†Ô∏è Acc√®s refus√© pour l'utilisateur ID: ${_id} avec r√¥le: ${role}`);
      return res.status(403).json({ message: "Acc√®s non autoris√©" });
    }

    const staffs = await Staff.find({ managerId: _id })
      .populate('departement', 'name description')  // Populer seulement certains champs
      .sort({ nom: 1 });

    console.log(`‚úÖ ${staffs.length} staff(s) trouv√©(s) pour le manager ID: ${_id}`);
    staffs.forEach(s => {
      console.log(`- Staff: ${s.nom} ${s.prenom}, D√©partement: ${s.departement ? s.departement.name : "Non renseign√©"}`);
    });

    res.status(200).json(staffs);

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration du staff :", error);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du staff" });
  }
};


export const getStaffByDepartment = async (req, res) => {
  const managerId = req.user.id;

  try {
    // R√©cup√©rer les d√©partements g√©r√©s par ce manager
    const departments = await Department.find({ managerId });
    const departmentIds = departments.map(dep => dep._id);

    console.log(`üîç D√©partements trouv√©s : ${departments.map(d => d.name).join(", ")}`);

    // R√©cup√©rer les staffs de ces d√©partements
    const staffs = await Staff.find({ department: { $in: departmentIds } }).populate('department');

    console.log(`üë• ${staffs.length} staff(s) trouv√©(s) pour le manager ${managerId}`);
    res.status(200).json(staffs);
  } catch (error) {
    console.error("‚ùå Erreur :", error);
    res.status(500).json({ message: "Erreur interne serveur" });
  }
};




// Statistiques globales
export const getStats = async (req, res) => {
  try {
    const totalStaff = await Staff.countDocuments();
    const contratsExpirants = await Staff.find({
      dateFinContrat: { $gte: new Date(), $lte: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) }
    });

    const parDepartement = await Staff.aggregate([
      { $group: { _id: "$departement", count: { $sum: 1 } } }
    ]);

    const parTypeContrat = await Staff.aggregate([
      { $group: { _id: "$typeContrat", count: { $sum: 1 } } }
    ]);

    res.json({
      totalStaff,
      contratsExpirants,
      parDepartement: parDepartement.map(d => ({ nom: d._id, count: d.count })),
      parTypeContrat: parTypeContrat.map(t => ({ type: t._id, count: t.count }))
    });
  } catch (err) {
    res.status(500).json({ message: "Erreur statistiques", error: err.message });
  }
};


// R√©cup√©rer les contrats expirants
export const getExpiredContracts = async (req, res) => {
  try {
    const expiredContracts = await Staff.find({
      dateFinContrat: { $lt: new Date() }
    }).sort({ dateFinContrat: 1 }); // Tri par date de fin de contrat

    if (expiredContracts.length === 0) {
      return res.status(404).json({ message: "Aucun contrat expirant trouv√©." });
    }

    res.json(expiredContracts);
  } catch (err) {
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des contrats expirants", error: err.message });
  }
};

